package org.metadatacenter.submission;

import biosample.TypeAttribute;
import biosample.TypeBioSample;
import biosample.TypeBioSampleIdentifier;
import common.sp.TypeDescriptor;
import common.sp.TypeOrganism;
import common.sp.TypePrimaryId;
import common.sp.TypeRefId;
import generated.TypeContactInfo;
import generated.TypeFileAttribute;
import generated.TypeName;
import generated.TypeOrganization;
import generated.TypeSubmission;
import org.metadatacenter.submission.biosample.AIRRTemplate;
import org.metadatacenter.submission.biosample.OptionalBioSampleAttribute;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import java.io.StringWriter;
import java.util.GregorianCalendar;

/**
 * Convert a CEDAR JSON Schema-based AIRR template instance into a BioProject/BioSample/SRA XML-based submission.
 */
public class AIRRTemplate2SRAConverter
{
  /**
   * The {@link org.metadatacenter.submission.biosample.AIRRTemplate} class is generated by jsonschema2pojo from the
   * AIRRTemplate.json JSON Schema file in the resources directory.
   *
   * @param airrInstance An AIRR template instance
   * @return A string containing a BioSample-conformant XML representation of the supplied AIRR instance
   * @throws DatatypeConfigurationException If a configuration error occurs during processing
   * @throws JAXBException                  If a JAXB error occurs during processing
   */
  public String generateSRASubmissionXMLFromAIRRTemplateInstance(AIRRTemplate airrInstance)
    throws DatatypeConfigurationException, JAXBException
  {
    final generated.ObjectFactory objectFactory = new generated.ObjectFactory();
    final biosample.ObjectFactory bioSampleObjectFactory = new biosample.ObjectFactory();
    final common.sp.ObjectFactory spCommonObjectFactory = new common.sp.ObjectFactory();

    TypeSubmission xmlSubmission = objectFactory.createTypeSubmission();

    // Submission/Description/Comment
    TypeSubmission.Description description = objectFactory.createTypeSubmissionDescription();
    xmlSubmission.setDescription(description);
    description.setComment(airrInstance.getProjectDescription().getComment().getValue());

    // Submission/Description/Hold/releaseDate
    TypeSubmission.Description.Hold hold = objectFactory.createTypeSubmissionDescriptionHold();
    description.setHold(hold);
    hold.setReleaseDate(createXMLGregorianCalendar("2019-10-10")); // Hard coded release date

    // Submission/Description/Organization
    TypeOrganization organization = objectFactory.createTypeOrganization();
    description.getOrganization().add(organization);
    organization.setRole("master");
    organization.setType("institute");

    // Submission/Description/Organization/Name
    TypeOrganization.Name organizationName = objectFactory.createTypeOrganizationName();
    organization.setName(organizationName);
    organizationName.setValue(airrInstance.getProjectDescription().getOrganizationName().getValue());

    // Submission/Description/Organization/ContactInfo/email
    TypeContactInfo contactInfo = objectFactory.createTypeContactInfo();
    organization.getContact().add(contactInfo);
    contactInfo.setEmail(airrInstance.getProjectDescription().getEmail().getValue());

    // Submission/Description/Organization/ContactInfo/Name
    TypeName name = objectFactory.createTypeName();
    contactInfo.setName(name);
    name.setFirst(airrInstance.getProjectDescription().getPIFirstName().getValue());
    name.setLast(airrInstance.getProjectDescription().getPISecondName().getValue());

    // Submission/Action[1] - BioSample
    TypeSubmission.Action bioSampleAction = objectFactory.createTypeSubmissionAction();
    xmlSubmission.getAction().add(bioSampleAction);

    // Submission/Action[1]/AddData/target_db
    TypeSubmission.Action.AddData addData = objectFactory.createTypeSubmissionActionAddData();
    bioSampleAction.setAddData(addData);
    addData.setTargetDb("BioSample");

    // Submission/Action[1]/AddData/Data/content_type
    TypeSubmission.Action.AddData.Data data = objectFactory.createTypeSubmissionActionAddDataData();
    addData.getData().add(data);
    data.setContentType("XML");

    // Submission/Action[1]/AddData/Data/XMLContent
    TypeSubmission.Action.AddData.Data.XmlContent xmlContent = objectFactory.createTypeInlineDataXmlContent();
    data.setXmlContent(xmlContent);

    // Submission/Action[1]/AddData/Data/XMLContent/BioSample/schema_version
    TypeBioSample bioSample = bioSampleObjectFactory.createTypeBioSample();
    xmlContent.setBioSample(bioSample);
    bioSample.setSchemaVersion("2.0");

    // Submission/Action[1]/AddData/Data/XMLContent/BioSample/SampleID
    TypeBioSampleIdentifier sampleID = bioSampleObjectFactory.createTypeBioSampleIdentifier();
    bioSample.setSampleId(sampleID);

    // Submission/Action[1]/AddData/Data/XMLContent/BioSample/SampleID/SPUID
    TypeBioSampleIdentifier.SPUID spuid = bioSampleObjectFactory.createTypeBioSampleIdentifierSPUID();
    sampleID.getSPUID().add(spuid);
    spuid.setSpuidNamespace("AIRR"); // TODO What should this be?
    spuid.setValue(airrInstance.getProjectDescription().getBioProjectID().getValue()); // TODO What should this be?

    // Submission/Action[1]/AddData/Data/XMLContent/BioSample/Descriptor
    TypeDescriptor descriptor = spCommonObjectFactory.createTypeDescriptor();
    bioSample.setDescriptor(descriptor);
    descriptor.setTitle("Example CEDAR-generated BioSample AIRR submission");

    // Submission/Action[1]/AddData/Data/XMLContent/BioSample/Organism
    /*TypeOrganism organism = spCommonObjectFactory.createTypeOrganism();
    bioSample.setOrganism(organism);
    organism.setOrganismName("Homo sapiens"); // TODO Where is this in AIRR template?*/

    // Submission/Action[1]/AddData/Data/XMLContent/BioSample/BioProject
    TypeRefId bioProject = spCommonObjectFactory.createTypeRefId();
    bioSample.getBioProject().add(bioProject);

    // Submission/Action[1]/AddData/Data/XMLContent/BioSample/BioProject/PrimaryID
    TypePrimaryId bioProjectPrimaryID = spCommonObjectFactory.createTypePrimaryId();
    bioProject.setPrimaryId(bioProjectPrimaryID);
    bioProjectPrimaryID.setDb("BioProject");
    bioProjectPrimaryID.setValue(airrInstance.getProjectDescription().getBioProjectID().getValue());

    // Submission/Action[1]/AddData/Data/XMLContent/BioSample/Package
    bioSample.setPackage("Human.1.0"); // TODO Is this hard coded for AIRR?

    for (aIRRBioSampleAttributes bioSampleAttributes : airrInstance.getAIRRBioSampleAttributes()
  	      .getaIRRBioSampleAttributes()){
    
    // Submission/Action[1]/AddData/Data/XMLContent/BioSample/Attributes
    TypeBioSample.Attributes bioSampleAttributes = bioSampleObjectFactory.createTypeBioSampleAttributes();
    bioSample.setAttributes(bioSampleAttributes);
    
    // Submission/Action[1]/AddData/Data/XMLContent/BioSample/Attributes/Attribute - AIRR BioSample attributes
    
    // New add
    TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("organism");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getOrganism().getValue());
    
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("age");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getAge().getValue());
    
    // new add
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("diseaseStage");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getDiseaseStage().getValue());
    
    // new add
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("isolate");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getIsolate().getValue());
    
 // new add
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("subject");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getsubject().getValue());
    

    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("sex");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getSex().getValue());
    
     
    // new add
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("ageEvent");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getAgeEvent().getValue());

    // new add
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("ancestryPopulation");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getAncestryPopulation().getValue());
    
 // new add
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("race");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getRace().getValue());
    
 // new add
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("ethnicity");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getEthnicity().getValue());
    
 // new add
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("speciesName");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getSpeciesName().getValue());
    
    // new add
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("strainName");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getStrainName().getValue());
    
    // new add
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("subjectLinked");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getSubjectLinked().getValue());
    
    // new add
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("linkType");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getLinkType().getValue());
    
    // diagnosis part metadata
    
    // new add
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("studyGroupDescription");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getStudyGroupDescription().getValue());
    
    // new add
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("diagnosis");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getDiagnosis().getValue());
    
    // new add
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("diseaseLength");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getDiseaseLength().getValue());
    
      
     // new add
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("priorTherapies");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getPriorTherapies().getValue());
    
    
    // new add
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("immunogen");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getImmunogen().getValue());
    
    
    // new add
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("interventionDefinition");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getInterventionDefinition().getValue());
    
    
    // new add
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("medicalHistory");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getMedicalHistory().getValue());
    
    /////////
    
    // new add
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("bioSample");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getBioSample().getValue());
    
    // new add
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("sampleType");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getsampleType().getValue());
   
    
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("anatomicSite");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getAnatomicSite().getValue());
    
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("diseaseStateSample");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getDiseaseStateSample().getValue());
    
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("collectionDate");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getCollectionDate().getValue());
    
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("collectionTimeEvent");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getCollectionTimeEvent().getValue());
   
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("biomaterialProvider");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getBiomaterialProvider().getValue());

    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("sourceCommercial");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getSourceCommercial().getValue());
    
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("geoLocName");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getGeoLocName().getValue());
     
    
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("tissue");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getTissue().getValue());
    
   //Added new
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("phenotype");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getPhenotype().getValue());
    

    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("tissueProcessing");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getTissueProcessing().getValue());
    
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("processingProtocol");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getProcessingProtocol().getValue());
    
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("cellSubset");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getCellSubset().getValue());

    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("cellInvolved");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getCellInvolved().getValue());
    
    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("cellNumber");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getCellNumber().getValue());

    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("cellStorage");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getCellStorage().getValue());

    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("cellQuality");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getCellQuality().getValue());

    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("cellIsolation");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getCellIsolation().getValue());

    attribute = bioSampleObjectFactory.createTypeAttribute();
    bioSampleAttributes.getAttribute().add(attribute);
    attribute.setAttributeName("isolationSource");
    attribute.setValue(airrInstance.getAIRRBioSampleAttributes().getIsolationSource().getValue());
 
    
    for (OptionalBioSampleAttribute optionalAttribute : airrInstance.getAIRRBioSampleAttributes()
      .getOptionalBioSampleAttribute()) {
      attribute = bioSampleObjectFactory.createTypeAttribute();
      bioSampleAttributes.getAttribute().add(attribute);
      attribute.setAttributeName(optionalAttribute.getName().getValue());
      attribute.setValue(optionalAttribute.getValue().getValue());
    }
  }
    
      
    for (aIRRSRAAttributes SRAAttributes : airrInstance.getSRAAttributes()
    	      .getaIRRSRAAttributes()){
      
    // Submission/Action[1]/AddData/Data/XMLContent/BioSample/Attributes
    TypeBioSample.Attributes sraAttributes = bioSampleObjectFactory.createTypeBioSampleAttributes();

    // Submission/Action[2] - SRA
    TypeSubmission.Action sraAction = objectFactory.createTypeSubmissionAction();
    xmlSubmission.getAction().add(sraAction);

    // Submission/Action[2]/AddFiles/target_db
    TypeSubmission.Action.AddFiles sraAddFiles = objectFactory.createTypeSubmissionActionAddFiles();
    sraAction.setAddFiles(sraAddFiles);
    sraAddFiles.setTargetDb("SRA");
    // TODO Set attribute CDE ID?

    // Submission/Action[2]/AddFiles/File
    TypeSubmission.Action.AddFiles.File sraFile = objectFactory.createTypeSubmissionActionAddFilesFile();
    sraAddFiles.getFile().add(sraFile);

    // Submission/Action[1]/AddFiles/Attributes/Attribute - AIRR SRA attributes
    TypeFileAttribute fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("libraryID");
    fileAttribute.setValue(airrInstance.getSRA().getLibraryID().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("libraryName");
    fileAttribute.setValue(airrInstance.getSRA().getTitle().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
    
    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("libraryName");
    fileAttribute.setValue(airrInstance.getSRA().getLibraryName().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
    
    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("instrumentModel");
    fileAttribute.setValue(airrInstance.getSRA().getInstrumentModel().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("libraryStartegy");
    fileAttribute.setValue(airrInstance.getSRA().getLibraryStrategy().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
    

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("platform");
    fileAttribute.setValue(airrInstance.getSRA().getPlatform().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("librarySource");
    fileAttribute.setValue(airrInstance.getSRA().getLibrarySource().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("librarySelection");
    fileAttribute.setValue(airrInstance.getSRA().getLibrarySelection().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("libraryLayout");
    fileAttribute.setValue(airrInstance.getSRA().getLibraryLayout().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
       
    // new added
    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("libraryConstructionProtocol");
    fileAttribute.setValue(airrInstance.getSRA().getLibraryConstructionProtocol().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
    
    //new added
    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("designDescription");
    fileAttribute.setValue(airrInstance.getSRA().getDesignDescription().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

    // TODO The value here seems to confuse the BioSample validator
    //    fileAttribute = objectFactory.createTypeFileAttribute();
    //    fileAttribute.setName("design_description");
    //    fileAttribute.setValue(airrInstance.getAIRRSRAAttributes().getDesignDescription().getValue());
    //    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

   // Template has been modified to accamodate multiple files
    /*fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("filetype");
    fileAttribute.setValue(airrInstance.getSRA().getFileType().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("filename");
    fileAttribute.setValue(airrInstance.getSRA().getFileName().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);*/

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("targetSubstrate"); 
    //fileAttribute.setValue(airrInstance.getAIRRSRAAttributes().getTargetSubstrate().getValue());
    fileAttribute.setValue(airrInstance.getSRA().getTargetSubstrateQuality().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("targetSubstrateQuality");
    fileAttribute.setValue(airrInstance.getSRA().getTargetSubstrateQuality().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("libraryGenerationMethod");
    fileAttribute.setValue(airrInstance.getSRA().getLibraryGenerationMethod().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("libraryGenerationProtocol");
    fileAttribute.setValue(airrInstance.getSRA().getLibraryGenerationProtocol().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("targetLocusPCR");
    fileAttribute.setValue(airrInstance.getSRA().getTargetLocusPCR().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("forwardPCRPrimerTargetLocation");
    fileAttribute.setValue(airrInstance.getSRA().getForwardPCRPrimerTargetLocation().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("reversePCRPrimerTargetLocation");
    fileAttribute.setValue(airrInstance.getSRA().getReversePCRPrimerTargetLocation().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("wholeVsPartialSequences");
    fileAttribute.setValue(airrInstance.getSRA().getWholeVsPartialSequences().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("comparisonHeavyLightPairedChains");
    fileAttribute.setValue(airrInstance.getSRA().getComparisonHeavyLightPairedChains().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("nGTemplate");
    fileAttribute.setValue(airrInstance.getSRA().getNGTemplate().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("totalReadsPassingQCFilter");
    fileAttribute.setValue(airrInstance.getSRA().getTotalReadsPassingQCFilter().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("protocolID");
    fileAttribute.setValue(airrInstance.getSRA().getProtocolID().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("readLength");
    fileAttribute.setValue(airrInstance.getSRA().getReadLength().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
    
    //new add
    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("sequencingPlatform");
    fileAttribute.setValue(airrInstance.getSRA().getSequencingPlatform().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
    
    //New add
    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("dateOfSequencingRun");
    fileAttribute.setValue(airrInstance.getSRA().getDateOfSequencingRun().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("sequencingFacility");
    fileAttribute.setValue(airrInstance.getSRA().getSequencingFacility().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("batchNumber");
    fileAttribute.setValue(airrInstance.getSRA().getBatchNumber().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

    fileAttribute = objectFactory.createTypeFileAttribute();
    fileAttribute.setName("sequencingKit");
    fileAttribute.setValue(airrInstance.getSRA().getSequencingKit().getValue());
    sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
    
    // File name and type (multiple) new added
    for (rawSequenceFileInformation FileInformation : airrInstance.getSRA()
  	      .getRawSequenceFileInformation()) {

    	fileAttribute = objectFactory.createTypeFileAttribute();
    	fileAttribute.setName("FileType");
        fileAttribute.setValue(FileInformation.getSRA().getFileType().getValue());
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
        
        fileAttribute = objectFactory.createTypeFileAttribute();
        fileAttribute.setName("FileName");
        fileAttribute.setValue(FileInformation.getSRA().getFileName().getValue());
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
    	  }
    }  
       
      StringWriter writer = new StringWriter();

    JAXBElement<TypeSubmission> submissionRoot = objectFactory.createSubmission(xmlSubmission);
    JAXBContext ctx = JAXBContext.newInstance(TypeSubmission.class);
    Marshaller marshaller = ctx.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
    //marshaller.marshal(submissionRoot, System.out);
    marshaller.marshal(submissionRoot, writer);

    return writer.toString();
  }

  private XMLGregorianCalendar createXMLGregorianCalendar(String date) throws DatatypeConfigurationException
  {
    DatatypeFactory datatypeFactory = DatatypeFactory.newInstance();
    GregorianCalendar gc = new GregorianCalendar();

    return datatypeFactory.newXMLGregorianCalendar(gc);
  }
}
