package org.metadatacenter.cedar.submission.resources;

import com.codahale.metrics.annotation.Timed;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.joda.time.DateTimeZone;
import org.metadatacenter.cedar.util.dw.CedarMicroserviceResource;
import org.metadatacenter.config.CedarConfig;
import org.metadatacenter.exception.CedarException;
import org.metadatacenter.rest.context.CedarRequestContext;
import org.metadatacenter.rest.context.CedarRequestContextFactory;
import org.metadatacenter.submission.AIRRTemplate2SRAConverter;
import org.metadatacenter.submission.BioSampleValidator;
import org.metadatacenter.submission.biosample.AIRRTemplate;
import org.metadatacenter.submission.ncbiairr.NcbiAirrSubmission;
import org.metadatacenter.submission.ncbiairr.queue.NcbiAirrSubmissionQueueService;
import org.metadatacenter.submission.upload.flow.FlowData;
import org.metadatacenter.submission.upload.flow.FlowUploadUtil;
import org.metadatacenter.submission.upload.flow.SubmissionUploadManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.management.InstanceNotFoundException;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.xml.bind.JAXBException;
import javax.xml.datatype.DatatypeConfigurationException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static org.metadatacenter.rest.assertion.GenericAssertions.LoggedIn;

/**
 * See here for submission instructions to NCBI:
 * <p>
 * https://docs.google.com/document/d/1tmPinCgaTwBkTsOwjitquFc0ZUN65w5xZs30q5phRkY/edit
 */
@Path("/command")
@Produces(MediaType.APPLICATION_JSON)
public class NcbiAirrSubmissionServerResource extends CedarMicroserviceResource {

  final static Logger logger = LoggerFactory.getLogger(NcbiAirrSubmissionServerResource.class);

  private final BioSampleValidator bioSampleValidator;

  private final AIRRTemplate2SRAConverter airrTemplate2SRAConverter;

  private static NcbiAirrSubmissionQueueService ncbiAirrSubmissionQueueService;

  public NcbiAirrSubmissionServerResource(CedarConfig cedarConfig) {
    super(cedarConfig);
    this.bioSampleValidator = new BioSampleValidator();
    this.airrTemplate2SRAConverter = new AIRRTemplate2SRAConverter();
  }

  public static void injectServices(NcbiAirrSubmissionQueueService ncbiAirrSubmissionQueueService) {
    NcbiAirrSubmissionServerResource.ncbiAirrSubmissionQueueService = ncbiAirrSubmissionQueueService;
  }

  /**
   * The {@link AIRRTemplate} class is generated by jsonschema2pojo from the
   * AIRRTemplate.json JSON Schema file in the resources directory. This file
   * contains the CEDAR template that defines the example SRA submission generated from an AIRR template.
   * An SRA submission incorporates BioSample metadata and a BioProject data.
   *
   * @param airrInstance An instance of an AIRR template
   * @return A validation response
   */
  @POST
  @Timed
  @Path("/validate-airr")
  @Consumes(MediaType.APPLICATION_JSON)
  public Response validate(
      AIRRTemplate airrInstance) throws CedarException {

    CedarRequestContext c = CedarRequestContextFactory.fromRequest(request);
    c.must(c.user()).be(LoggedIn);

    try {
      String bioSampleSubmissionXML = this.airrTemplate2SRAConverter
          .generateSRASubmissionXMLFromAIRRTemplateInstance(airrInstance);

      return Response.ok(this.bioSampleValidator.validateBioSampleSubmission(bioSampleSubmissionXML)).build();
    } catch (JAXBException | DatatypeConfigurationException e) {
      return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
    }
  }

  /**
   * This endpoint receives multiple chunks of a submission package and assemblies them. The submission may be
   * composed by one or multiple files. When the upload is complete, this method triggers the upload of all files that
   * are part of the submission to the NCBI via FTP. Submissions are processed sequentially using a queue.
   */
  @POST
  @Timed
  @Path("/upload-airr-to-cedar")
  @Consumes(MediaType.MULTIPART_FORM_DATA)
  public Response uploadAIRRToCEDAR() throws CedarException {

    CedarRequestContext c = CedarRequestContextFactory.fromRequest(request);
    c.must(c.user()).be(LoggedIn);

    // Check that this is a file upload request
    if (ServletFileUpload.isMultipartContent(request)) {
      try {
        // Extract all file or form items that were received within the multipart/form-data POST request
        List<FileItem> items = new ServletFileUpload(new DiskFileItemFactory()).parseRequest(request);
        FlowData data = FlowUploadUtil.getFlowData(items);

        // If the file does not exist, create it
        String cedarUserId = FlowUploadUtil.getLastFragmentOfUrl(c.getCedarUser().getId());
        File submissionTempDir = new File(FlowUploadUtil.getTempFolderName("ncbi-airr-upload", cedarUserId, data.getSubmissionId()));
        if (!submissionTempDir.exists()) {
          submissionTempDir.mkdirs();
        }
        File f = new File(submissionTempDir + "/" + data.flowFilename);
        if (!f.exists()) {
          f.createNewFile();
          logger.info("File created. Path: " + f);
        }
        String filePath = f.getAbsolutePath();

        // Use a random access file to assemble all the file chunks
        RandomAccessFile raf = new RandomAccessFile(f, "rw");
        FlowUploadUtil.writeToRandomAccessFile(raf, data, request.getContentLength());

        // Updates the submission upload status
        SubmissionUploadManager.getInstance().updateStatus(data, filePath);

        // Check if the upload is complete and trigger the FTP submission to NCBI
        if (SubmissionUploadManager.getInstance().isSubmissionUploadComplete(data.getSubmissionId())) {
          logger.info("Upload completed. Submission id: " + data.getSubmissionId());

          // Submit the files to the NCBI
          String submissionDir = FlowUploadUtil.getDateBasedFolderName(DateTimeZone.UTC) + "_test";
          logger.info("Starting submission to the NCBI. Destination folder: " + submissionDir);
          // Enqueue submission
          logger.info("Enqueuing submission");
          List<String> localFilePaths = SubmissionUploadManager.getInstance().getSubmissionFilePaths(data.getSubmissionId());
          NcbiAirrSubmission submission = new NcbiAirrSubmission(data.getSubmissionId(), cedarUserId, localFilePaths, submissionDir);
          ncbiAirrSubmissionQueueService.enqueueSubmission(submission);
          // Remove the submission from status map
          SubmissionUploadManager.getInstance().removeSubmissionStatus(data.getSubmissionId());
        }
      } catch (FileNotFoundException e) {
        logger.info(e.getMessage());
        return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
      } catch (IOException e) {
        logger.info(e.getMessage());
        return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
      } catch (InstanceNotFoundException e) {
        logger.info(e.getMessage());
        return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
      } catch (FileUploadException e) {
        logger.info(e.getMessage());
        return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
      } catch (IllegalAccessException e) {
        logger.info(e.getMessage());
        return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
      }

      return Response.ok().build();
    } else {
      return Response.status(Response.Status.BAD_REQUEST).build();
    }
  }

}

