package org.metadatacenter.cedar.submission.resources;

import com.codahale.metrics.annotation.Timed;
import com.google.common.base.Stopwatch;
import com.google.common.io.Files;
import org.metadatacenter.cedar.submission.resources.uploader.FileUploader;
import org.metadatacenter.cedar.submission.resources.uploader.FtpUploader;
import org.metadatacenter.cedar.submission.resources.uploader.UploaderCreationException;
import org.metadatacenter.cedar.util.dw.CedarMicroserviceResource;
import org.metadatacenter.config.CedarConfig;
import org.metadatacenter.config.FTPConfig;
import org.metadatacenter.exception.CedarException;
import org.metadatacenter.rest.context.CedarRequestContext;
import org.metadatacenter.rest.context.CedarRequestContextFactory;
import org.metadatacenter.submission.AIRRTemplate2SRAConverter;
import org.metadatacenter.submission.BioSampleValidator;
import org.metadatacenter.submission.biosample.AIRRTemplate;
import org.metadatacenter.util.http.CedarResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.xml.bind.JAXBException;
import javax.xml.datatype.DatatypeConfigurationException;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.TimeUnit;

import static org.metadatacenter.rest.assertion.GenericAssertions.LoggedIn;

/**
 * See here for submission instructions to NCBI:
 * <p>
 * https://docs.google.com/document/d/1tmPinCgaTwBkTsOwjitquFc0ZUN65w5xZs30q5phRkY/edit
 */
@Path("/command") @Produces(MediaType.APPLICATION_JSON) public class AIRRSubmissionServerResource
  extends CedarMicroserviceResource
{
  final static Logger logger = LoggerFactory.getLogger(AIRRSubmissionServerResource.class);

  private final BioSampleValidator bioSampleValidator;

  private final AIRRTemplate2SRAConverter airrTemplate2SRAConverter;

  public AIRRSubmissionServerResource(CedarConfig cedarConfig)
  {
    super(cedarConfig);
    this.bioSampleValidator = new BioSampleValidator();
    this.airrTemplate2SRAConverter = new AIRRTemplate2SRAConverter();
  }

  /**
   * The {@link AIRRTemplate} class is generated by jsonschema2pojo from the
   * AIRRTemplate.json JSON Schema file in the resources directory. This file
   * contains the CEDAR template that defines the example SRA submission generated from an AIRR template.
   * An SRA submission incorporates BioSample metadata and a BioProject data.
   *
   * @param airrInstance An instance of an AIRR template
   * @return A validation response
   */
  @POST @Timed @Path("/validate-airr") @Consumes(MediaType.APPLICATION_JSON) public Response validate(
    AIRRTemplate airrInstance) throws CedarException
  {

    CedarRequestContext c = CedarRequestContextFactory.fromRequest(request);
    c.must(c.user()).be(LoggedIn);

    try {
      String bioSampleSubmissionXML = this.airrTemplate2SRAConverter
        .generateSRASubmissionXMLFromAIRRTemplateInstance(airrInstance);

      return Response.ok(this.bioSampleValidator.validateBioSampleSubmission(bioSampleSubmissionXML)).build();
    } catch (JAXBException | DatatypeConfigurationException e) {
      return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
    }
  }

  private Response upload(List<File> listOfFiles) {
    FTPConfig ftpConfig = cedarConfig.getSubmissionConfig().getNcbi().getSra().getFtp();
    FileUploader uploader = null;
    try {
      String submissionDir = generateDirectoryName();
      uploader = FtpUploader.createNewUploader(
          ftpConfig.getHost(),
          ftpConfig.getUser(),
          ftpConfig.getPassword(),
          Optional.of(ftpConfig.getSubmissionDirectory()));
      uploadResourceFiles(uploader, submissionDir, listOfFiles);
      uploadSubmitReadyFile(uploader, submissionDir);
      return CedarResponse.ok().build();
    } catch (UploaderCreationException | IOException e) {
      String message = String.format("Error while uploading resources to %s", ftpConfig.getHost());
      logger.error(message + ": " + e.getMessage());
      return CedarResponse.internalServerError()
          .errorMessage(message)
          .exception(e)
          .build();
    } finally {
      if (uploader != null) {
        try {
          uploader.disconnect();
        } catch (IOException e) {
          String message = String.format("Error while disconnecting to %s", ftpConfig.getHost());
          logger.error(message + ": " + e.getMessage());
        }
      }
    }
  }

  private static String generateDirectoryName() {
    return Files.createTempDir().getName();
  }

  private void uploadResourceFiles(FileUploader uploader, String submissionDir, List<File> listOfFiles) throws IOException {
    for (File file : listOfFiles) {
      Stopwatch stopwatch = Stopwatch.createStarted();
      logger.info("Submission in progress: Uploading '{}' file...", file.getName());
      uploader.store(submissionDir, file);
      logger.info("... uploaded in {} s", stopwatch.elapsed(TimeUnit.SECONDS));
    }
  }

  private void uploadSubmitReadyFile(FileUploader uploader, String submissionDir) throws IOException {
    logger.info("Submission in progress: Uploading 'submit.ready' file...");
    File submitReady = createSubmitReadyFile();
    try {
      uploader.store(submissionDir, submitReady);
    } finally {
      if (submitReady != null) {
        submitReady.delete(); // remove traces
      }
    }
  }

  private static File createSubmitReadyFile() throws IOException {
    File submitReady = new File("submit.ready");
    Files.touch(submitReady);
    return submitReady;
  }
}
