package org.metadatacenter.cedar.submission.resources;

import com.codahale.metrics.annotation.Timed;
import org.metadatacenter.submission.AMIA2016DemoBioSampleTemplate2BioSampleConverter;
import org.metadatacenter.submission.BioSampleValidator;
import org.metadatacenter.submission.biosample.AMIA2016DemoBioSampleTemplate;

import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.xml.bind.JAXBException;
import javax.xml.datatype.DatatypeConfigurationException;
import java.io.IOException;

@Path("/command") @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public class AMIA2016DemoBioSampleServerResource
{
  private final BioSampleValidator bioSampleValidator;

  private final AMIA2016DemoBioSampleTemplate2BioSampleConverter amia2016DemoBioSampleTemplate2BioSampleConverter;

  public AMIA2016DemoBioSampleServerResource()
  {
    this.bioSampleValidator = new BioSampleValidator();
    this.amia2016DemoBioSampleTemplate2BioSampleConverter = new AMIA2016DemoBioSampleTemplate2BioSampleConverter();
  }

  /**
   * The {@link AMIA2016DemoBioSampleTemplate} class is generated by jsonschema2pojo from the
   * AMIA2016DemoBioSampleTemplate.json JSON Schema file in the resources directory. This file
   * contains the CEDAR template that defines the example BioSample submission used for the 2016 AMIA demo.
   */
  @POST @Timed @Path("/validate-biosample") public Response validate(
    AMIA2016DemoBioSampleTemplate amia2016BioSampleInstance)
  {
    try {
      String bioSampleSubmissionXML = this.amia2016DemoBioSampleTemplate2BioSampleConverter
        .generateBioSampleSubmissionXMLFromAMIA2016DemoBioSampleTemplateInstance(amia2016BioSampleInstance);

      return Response.ok(this.bioSampleValidator.validateBioSampleSubmission(bioSampleSubmissionXML)).build();
    } catch (JAXBException e) {
      return Response.status(Response.Status.BAD_REQUEST).build();
    } catch (IOException e) {
      return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
    } catch (DatatypeConfigurationException e) {
      return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
    }
  }
}